{"version":3,"sources":["webpack:///do_external_connect.min.js","webpack:///webpack/bootstrap ec751d16923df98c4df1","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./react/features/base/config/parseURLParams.js","webpack:///./react/features/base/util/loadScript.web.js","webpack:///./react/features/base/util/randomUtil.js","webpack:///./react/features/base/util/helpers.js","webpack:///./react/features/base/util/httpUtils.js","webpack:///./react/features/base/util/uri.js","webpack:///./react/features/base/config/getRoomName.js","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./connection_optimization/do_external_connect.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js"],"names":["t","__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","13","e","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","getLogger","id","transports","format","logger","push","setLogLevelById","level","length","setLevel","setLogLevel","url","dontParse","arguments","paramStr","search","hash","params","substr","split","forEach","part","param","key","value","JSON","parse","decodeURIComponent","replace","__WEBPACK_IMPORTED_MODULE_0__util__","String","loadScript","Promise","resolve","reject","JitsiMeetJS","util","ScriptUtil","randomAlphanumString","_randomString","ALPHANUM","randomElement","arr","randomInt","randomHexDigit","HEX_DIGITS","randomHexString","min","max","Math","floor","random","characters","result","window","app","target","source","to","nextKey","__webpack_exports__","msg","error","onerror","__filename","a","fetch","then","response","jsonify","json","ok","catch","_fixURIStringScheme","uri","regex","RegExp","URI_PROTOCOL_PATTERN","match","exec","protocol","toLowerCase","substring","lastIndex","startsWith","getLocationContextRoot","_ref","pathname","contextRootEndIndex","lastIndexOf","_objectToURLParamsArray","obj","encodeURIComponent","stringify","warn","parseStandardURIString","str","toString","_standardURIToString","_URI_AUTHORITY_PATTERN","authority","userinfoEndIndex","indexOf","host","portBeginIndex","port","hostname","_URI_PATH_PATTERN","hashBeginIndex","thiz","_ref2","this","contextRoot","room","fixedRoom","_ROOM_EXCLUDE_PATTERN","_typeof","URL","href","scheme","endsWith","domain","_parseStandardURIStri","APP_LINK_SCHEME","roomName","jwt","_arr","_i","configName","urlParamsArray","urlParamsString","join","getroomnode","config","path","location","log","args","Array","slice","callerInfo","methodName","fileLocation","line","column","Error","stack","globalTransports","concat","bind","apply","methods","keys","trace","debug","info","consoleTransport","console","transportIdx","splice","DEBUG","INFO","LOG","WARN","ERROR","724","checkForConnectHandlerAndConnect","APP","connect","status","handler","errorCallback","XMPPAttachInfo","r","__WEBPACK_IMPORTED_MODULE_1__react_features_base_config_parseURLParams__","createConnectionExternally","externalConnectUrl","isRecorder","__WEBPACK_IMPORTED_MODULE_0__react_features_base_config_getRoomName__","token","connectionInfo","data","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","len","arg","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop"],"mappings":"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","file":"do_external_connect.min.js","sourcesContent":["!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/libs/\",n(n.s=724)}({13:function(t,e,n){var r=n(62),o=n(83),i={},s=[],a=r.levels.TRACE;t.exports={addGlobalTransport:function(t){r.addGlobalTransport(t)},removeGlobalTransport:function(t){r.removeGlobalTransport(t)},getLogger:function(t,e,n){var o=new r(a,t,e,n);return t?(i[t]=i[t]||[],i[t].push(o)):s.push(o),o},setLogLevelById:function(t,e){for(var n=e?i[e]||[]:s,r=0;r<n.length;r++)n[r].setLevel(t)},setLogLevel:function(t){a=t;for(var e=0;e<s.length;e++)s[e].setLevel(t);for(var n in i){var r=i[n]||[];for(e=0;e<r.length;e++)r[e].setLevel(t)}},levels:r.levels,LogCollector:o}},131:function(t,e,n){\"use strict\";e.a=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=\"search\"===(arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"hash\")?t.search:t.hash,o={};return n&&n.substr(1).split(\"&\").forEach(function(t){var n=t.split(\"=\"),i=n[0];if(i){var s=void 0;try{s=n[1],e||(s=JSON.parse(decodeURIComponent(s).replace(/\\\\&/,\"&\")))}catch(t){return void Object(r.m)(t,\"Failed to parse URL parameter value: \"+String(s))}o[i]=s}}),o};var r=n(21)},21:function(t,e,n){\"use strict\";var r=n(283),o=n(284);function i(t){return new Promise(function(e,n){return JitsiMeetJS.util.ScriptUtil.loadScript(t,!0,!1,!1,e,n)})}var s=\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",a=\"0123456789abcdef\";function u(t){return d(t,s)}function c(t){return t[h(0,t.length-1)]}function l(){return c(a)}function f(t){return d(t,a)}function h(t,e){return Math.floor(Math.random()*(e-t+1))+t}function d(t,e){for(var n=\"\",r=0;r<t;++r)n+=c(e);return n}var p=n(285);n.d(e,\"e\",function(){return r.b}),n.d(e,!1,function(){}),n.d(e,\"c\",function(){return r.a}),n.d(e,\"m\",function(){return r.c}),n.d(e,\"d\",function(){return o.a}),n.d(e,\"g\",function(){return i}),n.d(e,!1,function(){return u}),n.d(e,\"j\",function(){return c}),n.d(e,!1,function(){return l}),n.d(e,\"k\",function(){return f}),n.d(e,\"l\",function(){return h}),n.d(e,\"a\",function(){return p.a}),n.d(e,\"b\",function(){return p.b}),n.d(e,\"f\",function(){return p.c}),n.d(e,\"h\",function(){return p.d}),n.d(e,\"i\",function(){return p.e}),n.d(e,\"n\",function(){return p.f}),n.d(e,!1,function(){})},283:function(t,e,n){\"use strict\";(function(t){e.b=function(){window.JitsiMeetJS||(window.JitsiMeetJS={});window.JitsiMeetJS.app||(window.JitsiMeetJS.app={});return window.JitsiMeetJS.app},e.a=function(t,e){var n=Object(t);for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];void 0!==o&&(n[r]=o)}return n},e.c=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\";r.error(e,t),window.onerror&&window.onerror(e,null,null,null,t)};var r=n(13).getLogger(t)}).call(e,\"react/features/base/util/helpers.js\")},284:function(t,e,n){\"use strict\";(function(t){e.a=function(t){return fetch(t).then(function(t){var e=t.json();return t.ok?e:e.then(function(t){return Promise.reject(t)})}).catch(function(e){return r.error(\"Error performing get:\",t,e),Promise.reject(e)})};var r=n(13).getLogger(t)}).call(e,\"react/features/base/util/httpUtils.js\")},285:function(t,e,n){\"use strict\";(function(t){n.d(e,\"a\",function(){return i}),n.d(e,\"b\",function(){return c}),e.c=f,e.d=d,e.e=function(t){if(\"string\"!=typeof t)return;var e=d(function(t){var e=new RegExp(\"^\"+c+\"//hipchat\\\\.com/video/call/\",\"gi\"),n=e.exec(t);n||(e=new RegExp(\"^\"+c+\"//enso\\\\.me/(?:call|meeting)/\",\"gi\"),n=e.exec(t));n&&(t=n[1]+\"//enso.hipchat.me/\"+t.substring(e.lastIndex));return t}(l(t)));e.contextRoot=f(e);var n=e.pathname,r=n.lastIndexOf(\"/\"),o=n.substring(r+1)||void 0;if(o){var i=function(t){return t?t.replace(new RegExp(s,\"g\"),\"\"):t}(o);i!==o&&(o=i,e.pathname=n.substring(0,r+1)+(o||\"\"))}return e.room=o,e},e.f=function(t){var e=void 0;switch(void 0===t?\"undefined\":r(t)){case\"object\":t&&(e=t instanceof URL?t.href:function(t){var e=d(l(t.url||\"\"));if(!e.protocol){var n=t.protocol||t.scheme;n&&(n.endsWith(\":\")||(n+=\":\"),e.protocol=n)}var r=e.pathname;if(!e.host){var o=t.domain||t.host||t.hostname;if(o){var s=d(l(i+\"//\"+o)),a=s.host,u=s.hostname,c=s.pathname,f=s.port;a&&(e.host=a,e.hostname=u,e.port=f),\"/\"===r&&\"/\"!==c&&(r=c)}}var p=t.roomName||t.room;!p||!e.pathname.endsWith(\"/\")&&e.pathname.endsWith(\"/\"+p)||(r.endsWith(\"/\")||(r+=\"/\"),r+=p);e.pathname=r;var g=t.jwt;if(g){var v=e.search;-1===v.indexOf(\"?jwt=\")&&-1===v.indexOf(\"&jwt=\")&&(v.startsWith(\"?\")||(v=\"?\"+v),1===v.length||(v+=\"&\"),v+=\"jwt=\"+g,e.search=v)}for(var b=e.hash,m=[\"config\",\"interfaceConfig\"],w=0;w<m.length;w++){var y=m[w],x=h(t[y+\"Overwrite\"]||t[y]||t[y+\"Override\"]);if(x.length){var L=y+\".\"+x.join(\"&\"+y+\".\");b.length?L=\"&\"+L:b=\"#\",b+=L}}return e.hash=b,e.toString()||void 0}(t));break;case\"string\":e=String(t)}return e};var r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},o=n(13).getLogger(t),i=\"org.jitsi.meet:\",s=\"[\\\\:\\\\?#\\\\[\\\\]@!$&'()*+,;=></\\\"]\",a=\"(//[^/?#]+)\",u=\"([^?#]*)\",c=\"([a-z][a-z0-9\\\\.\\\\+-]*:)\";function l(t){var e=new RegExp(\"^\"+c+\"+\",\"gi\"),n=e.exec(t);if(n){var r=n[n.length-1].toLowerCase();\"http:\"!==r&&\"https:\"!==r&&(r=\"https:\"),(t=t.substring(e.lastIndex)).startsWith(\"//\")&&(t=r+t)}return t}function f(t){var e=t.pathname,n=e.lastIndexOf(\"/\");return-1===n?\"/\":e.substring(0,n+1)}function h(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=[];for(var n in t)try{e.push(n+\"=\"+encodeURIComponent(JSON.stringify(t[n])))}catch(t){o.warn(\"Error encoding \"+n+\": \"+t)}return e}function d(t){var e={toString:p},n=void 0,r=void 0;if(t=t.replace(/\\s/g,\"\"),(r=(n=new RegExp(\"^\"+c,\"gi\")).exec(t))&&(e.protocol=r[1].toLowerCase(),t=t.substring(n.lastIndex)),r=(n=new RegExp(\"^\"+a,\"gi\")).exec(t)){var o=r[1].substring(2);t=t.substring(n.lastIndex);var i=o.indexOf(\"@\");-1!==i&&(o=o.substring(i+1)),e.host=o;var s=o.lastIndexOf(\":\");-1!==s&&(e.port=o.substring(s+1),o=o.substring(0,s)),e.hostname=o}var l=void 0;if((r=(n=new RegExp(\"^\"+u,\"gi\")).exec(t))&&(l=r[1],t=t.substring(n.lastIndex)),l?l.startsWith(\"/\")||(l=\"/\"+l):l=\"/\",e.pathname=l,t.startsWith(\"?\")){var f=t.indexOf(\"#\",1);-1===f&&(f=t.length),e.search=t.substring(0,f),t=t.substring(f)}else e.search=\"\";return e.hash=t.startsWith(\"#\")?t:\"\",e}function p(t){var e=t||this,n=e.hash,r=e.host,o=e.pathname,i=e.protocol,s=e.search,a=\"\";return i&&(a+=i),r&&(a+=\"//\"+r),a+=o||\"/\",s&&(a+=s),n&&(a+=n),a}}).call(e,\"react/features/base/util/uri.js\")},485:function(t,e,n){\"use strict\";e.a=function(){var t=config.getroomnode,e=window.location.pathname,n=void 0;n=t&&\"function\"==typeof t?t.call(config,e):e.substring(e.lastIndexOf(\"/\")+1).toLowerCase()||void 0;return n}},62:function(t,e){var n={trace:0,debug:1,info:2,log:3,warn:4,error:5};i.consoleTransport=console;var r=[i.consoleTransport];function o(){var t=arguments[0],e=arguments[1],o=Array.prototype.slice.call(arguments,2);if(!(n[e]<t.level))for(var i=function(){var t={methodName:\"\",fileLocation:\"\",line:null,column:null},e=new Error,n=e.stack?e.stack.split(\"\\n\"):[];if(!n||n.length<1)return t;var r=null;return n[3]&&(r=n[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/)),!r||r.length<=4?(0===n[2].indexOf(\"log@\")?t.methodName=n[3].substr(0,n[3].indexOf(\"@\")):t.methodName=n[2].substr(0,n[2].indexOf(\"@\")),t):(t.methodName=r[1],t.fileLocation=r[2],t.line=r[3],t.column=r[4],t)}(),s=r.concat(t.transports),a=0;a<s.length;a++){var u=s[a],c=u[e];c&&\"function\"==typeof c&&c.bind(u,t.id?\"[\"+t.id+\"]\":\"\",\"<\"+i.methodName+\">: \").apply(u,o)}}function i(t,e,r,i){this.id=e,this.format=i,this.transports=r,this.transports||(this.transports=[]),this.level=n[t];for(var s=Object.keys(n),a=0;a<s.length;a++)this[s[a]]=o.bind(null,this,s[a])}i.addGlobalTransport=function(t){-1===r.indexOf(t)&&r.push(t)},i.removeGlobalTransport=function(t){var e=r.indexOf(t);-1!==e&&r.splice(e,1)},i.prototype.setLevel=function(t){this.level=n[t]},t.exports=i,i.levels={TRACE:\"trace\",DEBUG:\"debug\",INFO:\"info\",LOG:\"log\",WARN:\"warn\",ERROR:\"error\"}},724:function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(485),o=n(131);if(\"function\"==typeof createConnectionExternally){var i=Object(o.a)(window.location,!0,\"hash\")[\"config.externalConnectUrl\"]||config.externalConnectUrl,s=Object(o.a)(window.location,!0,\"hash\")[\"config.iAmRecorder\"],a=void 0;if(i&&(a=Object(r.a)())&&!s){i+=\"?room=\"+a;var u=Object(o.a)(window.location,!0,\"search\").jwt;u&&(i+=\"&token=\"+u),createConnectionExternally(i,function(t){window.XMPPAttachInfo={status:\"success\",data:t},c()},l)}else l()}else l();function c(){window.APP&&\"ready\"===window.APP.connect.status&&window.APP.connect.handler()}function l(t){t&&console.warn(t),window.XMPPAttachInfo={status:\"error\"},c()}},83:function(t,e,n){var r=n(62);function o(t,e){this.logStorage=t,this.stringifyObjects=!(!e||!e.stringifyObjects)&&e.stringifyObjects,this.storeInterval=e&&e.storeInterval?e.storeInterval:3e4,this.maxEntryLength=e&&e.maxEntryLength?e.maxEntryLength:1e4,Object.keys(r.levels).forEach(function(t){this[r.levels[t]]=function(t){this._log.apply(this,arguments)}.bind(this,t)}.bind(this)),this.storeLogsIntervalID=null,this.queue=[],this.totalLen=0,this.outputCache=[]}o.prototype.stringify=function(t){try{return JSON.stringify(t)}catch(t){return\"[object with circular refs?]\"}},o.prototype.formatLogMessage=function(t){for(var e=\"\",n=1,o=arguments.length;n<o;n++){var i=arguments[n];!this.stringifyObjects&&t!==r.levels.ERROR||\"object\"!=typeof i||(i=this.stringify(i)),e+=i,n!=o-1&&(e+=\" \")}return e.length?e:null},o.prototype._log=function(){var t=this.formatLogMessage.apply(this,arguments);if(t){var e=this.queue.length?this.queue[this.queue.length-1]:void 0;(\"object\"==typeof e?e.text:e)==t?\"object\"==typeof e?e.count+=1:this.queue[this.queue.length-1]={text:t,count:2}:(this.queue.push(t),this.totalLen+=t.length)}this.totalLen>=this.maxEntryLength&&this._flush(!0,!0)},o.prototype.start=function(){this._reschedulePublishInterval()},o.prototype._reschedulePublishInterval=function(){this.storeLogsIntervalID&&(window.clearTimeout(this.storeLogsIntervalID),this.storeLogsIntervalID=null),this.storeLogsIntervalID=window.setTimeout(this._flush.bind(this,!1,!0),this.storeInterval)},o.prototype.flush=function(){this._flush(!1,!0)},o.prototype._flush=function(t,e){this.totalLen>0&&(this.logStorage.isReady()||t)&&(this.logStorage.isReady()?(this.outputCache.length&&(this.outputCache.forEach(function(t){this.logStorage.storeLogs(t)}.bind(this)),this.outputCache=[]),this.logStorage.storeLogs(this.queue)):this.outputCache.push(this.queue),this.queue=[],this.totalLen=0),e&&this._reschedulePublishInterval()},o.prototype.stop=function(){this._flush(!1,!1)},t.exports=o}});\n\n\n// WEBPACK FOOTER //\n// do_external_connect.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 724);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ec751d16923df98c4df1","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/index.js\n// module id = 13\n// module chunks = 0 1 2 3 4 5","/* @flow */\n\nimport { reportError } from '../util';\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            reportError(\n                e, `Failed to parse URL parameter value: ${String(value)}`);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/config/parseURLParams.js","// @flow\n\ndeclare var JitsiMeetJS: Object;\n\n/**\n * Loads a script from a specific URL. The script will be interpreted upon load.\n *\n * @param {string} url - The url to be loaded.\n * @returns {Promise} Resolved with no arguments when the script is loaded and\n * rejected with the error from JitsiMeetJS.ScriptUtil.loadScript method.\n */\nexport function loadScript(url: string): Promise<void> {\n    return new Promise((resolve, reject) =>\n        JitsiMeetJS.util.ScriptUtil.loadScript(\n            url,\n            /* async */ true,\n            /* prepend */ false,\n            /* relativeURL */ false,\n            /* loadCallback */ resolve,\n            /* errorCallback */ reject));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/loadScript.web.js","// @flow\n\n/**\n * Alphanumeric characters.\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digit characters.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generate a string with random alphanumeric characters with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @returns {string} A string of random alphanumeric characters with the\n * specified length.\n */\nexport function randomAlphanumString(length: number) {\n    return _randomString(length, ALPHANUM);\n}\n\n/**\n * Get random element of array or string.\n *\n * @param {Array|string} arr - Source.\n * @returns {Array|string} Array element or string character.\n */\nexport function randomElement(arr: Array<*> | string) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Returns a random hex digit.\n *\n * @returns {Array|string}\n */\nexport function randomHexDigit() {\n    return randomElement(HEX_DIGITS);\n}\n\n/**\n * Generates a string of random hexadecimal digits with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @returns {string} A string of random hexadecimal digits with the specified\n * length.\n */\nexport function randomHexString(length: number) {\n    return _randomString(length, HEX_DIGITS);\n}\n\n/**\n * Generates random int within the range [min, max].\n *\n * @param {number} min - The minimum value for the generated number.\n * @param {number} max - The maximum value for the generated number.\n * @returns {number} Random int number.\n */\nexport function randomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Generates a string of random characters with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @param {string} characters - The characters from which the returned string is\n * to be constructed.\n * @private\n * @returns {string} A string of random characters with the specified length.\n */\nfunction _randomString(length, characters) {\n    let result = '';\n\n    for (let i = 0; i < length; ++i) {\n        result += randomElement(characters);\n    }\n\n    return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/randomUtil.js","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Gets the description of a specific {@code Symbol}.\n *\n * @param {Symbol} symbol - The {@code Symbol} to retrieve the description of.\n * @private\n * @returns {string} The description of {@code symbol}.\n */\nexport function getSymbolDescription(symbol: ?Symbol) {\n    let description = symbol ? symbol.toString() : 'undefined';\n\n    if (description.startsWith('Symbol(') && description.endsWith(')')) {\n        description = description.slice(7, -1);\n    }\n\n    // The polyfill es6-symbol that we use does not appear to comply with the\n    // Symbol standard and, merely, adds @@ at the beginning of the description.\n    if (description.startsWith('@@')) {\n        description = description.slice(2);\n    }\n\n    return description;\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/helpers.js","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url) {\n    return fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        })\n        .catch(error => {\n            logger.error('Error performing get:', url, error);\n\n            return Promise.reject(error);\n        });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/httpUtils.js","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Excludes/removes certain characters from a specific room (name) which are\n * incompatible with Jitsi Meet on the client and/or server sides.\n *\n * @param {?string} room - The room (name) to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixRoom(room: ?string) {\n    return room\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : room;\n}\n\n/**\n * Fixes the hier-part of a specific URI (string) so that the URI is well-known.\n * For example, certain Jitsi Meet deployments are not conventional but it is\n * possible to translate their URLs into conventional.\n *\n * @param {string} uri - The URI (string) to fix the hier-part of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringHierPart(uri) {\n    // Rewrite the specified URL in order to handle special cases such as\n    // hipchat.com and enso.me which do not follow the common pattern of most\n    // Jitsi Meet deployments.\n\n    // hipchat.com\n    let regex\n        = new RegExp(\n            `^${URI_PROTOCOL_PATTERN}//hipchat\\\\.com/video/call/`,\n            'gi');\n    let match: Array<string> | null = regex.exec(uri);\n\n    if (!match) {\n        // enso.me\n        regex\n            = new RegExp(\n                `^${URI_PROTOCOL_PATTERN}//enso\\\\.me/(?:call|meeting)/`,\n                'gi');\n        match = regex.exec(uri);\n    }\n    if (match) {\n        /* eslint-disable no-param-reassign, prefer-template */\n\n        uri\n            = match[1] /* protocol */\n                + '//enso.hipchat.me/'\n                + uri.substring(regex.lastIndex); /* room (name) */\n\n        /* eslint-enable no-param-reassign, prefer-template */\n    }\n\n    return uri;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`^${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            logger.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n\n    // protocol\n    regex = new RegExp(`^${URI_PROTOCOL_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     contextRoot: string,\n *     hash: string,\n *     host: string,\n *     hostname: string,\n *     pathname: string,\n *     port: string,\n *     protocol: string,\n *     room: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj\n        = parseStandardURIString(\n            _fixURIStringHierPart(_fixURIStringScheme(uri)));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\n\n    if (room) {\n        const fixedRoom = _fixRoom(room);\n\n        if (fixedRoom !== room) {\n            room = fixedRoom;\n\n            // XXX Drive fixedRoom into pathname (because room is derived from\n            // pathname).\n            obj.pathname\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\n        }\n    }\n    obj.room = room;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(Object | string)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    const url = parseStandardURIString(_fixURIStringScheme(o.url || ''));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const configName of [ 'config', 'interfaceConfig' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${configName}Overwrite`]\n                    || o[configName]\n                    || o[`${configName}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${configName}.${urlParamsArray.join(`&${configName}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/uri.js","/* @flow */\n\ndeclare var config: Object;\n\n/**\n * Builds and returns the room name.\n *\n * @returns {string}\n */\nexport default function getRoomName(): ?string {\n    const { getroomnode } = config;\n    const path = window.location.pathname;\n    let roomName;\n\n    // Determine the room node from the URL.\n    if (getroomnode && typeof getroomnode === 'function') {\n        roomName = getroomnode.call(config, path);\n    } else {\n        // Fall back to the default strategy of making assumptions about how the\n        // URL maps to the room (name). It currently assumes a deployment in\n        // which the last non-directory component of the path (name) is the\n        // room.\n        roomName\n            = path.substring(path.lastIndexOf('/') + 1).toLowerCase()\n                || undefined;\n    }\n\n    return roomName;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/config/getRoomName.js","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/Logger.js\n// module id = 62\n// module chunks = 0 1 2 3 4 5","/* global config, createConnectionExternally */\n\nimport getRoomName from '../react/features/base/config/getRoomName';\nimport parseURLParams from '../react/features/base/config/parseURLParams';\n\n/**\n * Implements external connect using createConnectionExternally function defined\n * in external_connect.js for Jitsi Meet. Parses the room name and JSON Web\n * Token (JWT) from the URL and executes createConnectionExternally.\n *\n * NOTE: If you are using lib-jitsi-meet without Jitsi Meet, you should use this\n * file as reference only because the implementation is Jitsi Meet-specific.\n *\n * NOTE: For optimal results this file should be included right after\n * external_connect.js.\n */\n\nif (typeof createConnectionExternally === 'function') {\n    // URL params have higher priority than config params.\n    let url\n        = parseURLParams(window.location, true, 'hash')[\n                'config.externalConnectUrl']\n            || config.externalConnectUrl;\n    const isRecorder\n        = parseURLParams(window.location, true, 'hash')['config.iAmRecorder'];\n\n    let roomName;\n\n    if (url && (roomName = getRoomName()) && !isRecorder) {\n        url += `?room=${roomName}`;\n\n        const token = parseURLParams(window.location, true, 'search').jwt;\n\n        if (token) {\n            url += `&token=${token}`;\n        }\n\n        createConnectionExternally(\n            url,\n            connectionInfo => {\n                // Sets that global variable to be used later by connect method\n                // in connection.js.\n                window.XMPPAttachInfo = {\n                    status: 'success',\n                    data: connectionInfo\n                };\n                checkForConnectHandlerAndConnect();\n            },\n            errorCallback);\n    } else {\n        errorCallback();\n    }\n} else {\n    errorCallback();\n}\n\n/**\n * Check if connect from connection.js was executed and executes the handler\n * that is going to finish the connect work.\n *\n * @returns {void}\n */\nfunction checkForConnectHandlerAndConnect() {\n    window.APP\n        && window.APP.connect.status === 'ready'\n        && window.APP.connect.handler();\n}\n\n/**\n * Implements a callback to be invoked if anything goes wrong.\n *\n * @param {Error} error - The specifics of what went wrong.\n * @returns {void}\n */\nfunction errorCallback(error) {\n    // The value of error is undefined if external connect is disabled.\n    error && console.warn(error);\n\n    // Sets that global variable to be used later by connect method in\n    // connection.js.\n    window.XMPPAttachInfo = {\n        status: 'error'\n    };\n    checkForConnectHandlerAndConnect();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./connection_optimization/do_external_connect.js","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/LogCollector.js\n// module id = 83\n// module chunks = 0 1 2 3 4 5"],"sourceRoot":""}