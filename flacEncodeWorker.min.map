{"version":3,"sources":["webpack:///flacEncodeWorker.min.js","webpack:///webpack/bootstrap ec751d16923df98c4df1","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./react/features/local-recording/recording/flac/messageTypes.js","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./react/features/local-recording/recording/flac/flacEncodeWorker.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js"],"names":["t","__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","13","e","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","getLogger","id","transports","format","logger","push","setLogLevelById","level","length","setLevel","setLogLevel","__webpack_exports__","DEBUG","MAIN_THREAD_FINISH","MAIN_THREAD_INIT","MAIN_THREAD_NEW_DATA_ARRIVED","WORKER_LIBFLAC_READY","WORKER_BLOB_READY","62","log","arguments","args","Array","slice","callerInfo","methodName","fileLocation","line","column","error","Error","stack","split","match","indexOf","substr","globalTransports","concat","bind","apply","this","methods","keys","trace","debug","info","warn","consoleTransport","console","transportIdx","splice","INFO","LOG","WARN","ERROR","725","value","r","writable","key","__filename","self","FLAC_SCRIPT_LOCATION","importScripts","FLAC_ERRORS","0","1","2","3","4","5","6","7","8","EncoderState","freeze","UNINTIALIZED","Symbol","WORKING","FINISHED","FLAC_COMPRESSION_LEVEL","Encoder","sampleRate","bitDepth","bufferSize","TypeError","_encoderId","_flacBuffers","_flacLength","_state","_data","_onMetadataAvailable","Flac","isReady","_sampleRate","_bitDepth","_bufferSize","init_libflac_encoder","init_encoder_stream","_onEncodedData","audioData","bufferLength","bufferI32","Int32Array","view","DataView","buffer","index","setInt32","FLAC__stream_encoder_process_interleaved","errorNo","FLAC__stream_encoder_get_state","status","FLAC__stream_encoder_finish","FLAC__stream_encoder_delete","_exportFlacBlob","samples","arrays","totalLength","result","Uint8Array","offset","len","set","Blob","type","bytes","byteLength","encoder","onmessage","data","command","__WEBPACK_IMPORTED_MODULE_0__messageTypes__","bps","config","postMessage","f","onready","setTimeout","encode","buf","b","finish","getBlob","83","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","forEach","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","JSON","formatLogMessage","msg","arg","prevMessage","text","count","_flush","start","_reschedulePublishInterval","window","clearTimeout","flush","force","reschedule","cachedQueue","storeLogs","stop"],"mappings":"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","file":"flacEncodeWorker.min.js","sourcesContent":["!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/libs/\",n(n.s=725)}({13:function(t,e,n){var r=n(62),o=n(83),i={},s=[],a=r.levels.TRACE;t.exports={addGlobalTransport:function(t){r.addGlobalTransport(t)},removeGlobalTransport:function(t){r.removeGlobalTransport(t)},getLogger:function(t,e,n){var o=new r(a,t,e,n);return t?(i[t]=i[t]||[],i[t].push(o)):s.push(o),o},setLogLevelById:function(t,e){for(var n=e?i[e]||[]:s,r=0;r<n.length;r++)n[r].setLevel(t)},setLogLevel:function(t){a=t;for(var e=0;e<s.length;e++)s[e].setLevel(t);for(var n in i){var r=i[n]||[];for(e=0;e<r.length;e++)r[e].setLevel(t)}},levels:r.levels,LogCollector:o}},473:function(t,e,n){\"use strict\";n.d(e,\"b\",function(){return r}),n.d(e,\"c\",function(){return o}),n.d(e,\"d\",function(){return i}),n.d(e,\"f\",function(){return s}),n.d(e,\"e\",function(){return a}),n.d(e,\"a\",function(){return l});var r=\"MAIN_THREAD_FINISH\",o=\"MAIN_THREAD_INIT\",i=\"MAIN_THREAD_NEW_DATA_ARRIVED\",s=\"WORKER_LIBFLAC_READY\",a=\"WORKER_BLOB_READY\",l=\"DEBUG\"},62:function(t,e){var n={trace:0,debug:1,info:2,log:3,warn:4,error:5};i.consoleTransport=console;var r=[i.consoleTransport];function o(){var t=arguments[0],e=arguments[1],o=Array.prototype.slice.call(arguments,2);if(!(n[e]<t.level))for(var i=function(){var t={methodName:\"\",fileLocation:\"\",line:null,column:null},e=new Error,n=e.stack?e.stack.split(\"\\n\"):[];if(!n||n.length<1)return t;var r=null;return n[3]&&(r=n[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/)),!r||r.length<=4?(0===n[2].indexOf(\"log@\")?t.methodName=n[3].substr(0,n[3].indexOf(\"@\")):t.methodName=n[2].substr(0,n[2].indexOf(\"@\")),t):(t.methodName=r[1],t.fileLocation=r[2],t.line=r[3],t.column=r[4],t)}(),s=r.concat(t.transports),a=0;a<s.length;a++){var l=s[a],c=l[e];c&&\"function\"==typeof c&&c.bind(l,t.id?\"[\"+t.id+\"]\":\"\",\"<\"+i.methodName+\">: \").apply(l,o)}}function i(t,e,r,i){this.id=e,this.format=i,this.transports=r,this.transports||(this.transports=[]),this.level=n[t];for(var s=Object.keys(n),a=0;a<s.length;a++)this[s[a]]=o.bind(null,this,s[a])}i.addGlobalTransport=function(t){-1===r.indexOf(t)&&r.push(t)},i.removeGlobalTransport=function(t){var e=r.indexOf(t);-1!==e&&r.splice(e,1)},i.prototype.setLevel=function(t){this.level=n[t]},t.exports=i,i.levels={TRACE:\"trace\",DEBUG:\"debug\",INFO:\"info\",LOG:\"log\",WARN:\"warn\",ERROR:\"error\"}},725:function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),function(t){var e=n(473),r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=n(13).getLogger(t);self.FLAC_SCRIPT_LOCATION=\"/libs/\",importScripts(\"/libs/libflac4-1.3.2.min.js\");var i={0:\"FLAC__STREAM_ENCODER_OK\",1:\"FLAC__STREAM_ENCODER_UNINITIALIZED\",2:\"FLAC__STREAM_ENCODER_OGG_ERROR\",3:\"FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR\",4:\"FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA\",5:\"FLAC__STREAM_ENCODER_CLIENT_ERROR\",6:\"FLAC__STREAM_ENCODER_IO_ERROR\",7:\"FLAC__STREAM_ENCODER_FRAMING_ERROR\",8:\"FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR\"},s=Object.freeze({UNINTIALIZED:Symbol(\"uninitialized\"),WORKING:Symbol(\"working\"),FINISHED:Symbol(\"finished\")}),a=5;var l=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:4096;if(function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this._encoderId=0,this._flacBuffers=[],this._flacLength=0,this._state=s.UNINTIALIZED,this._data=null,this._onMetadataAvailable=function(){},!Flac.isReady())throw new Error(\"libflac is not ready yet!\");if(this._sampleRate=e,this._bitDepth=n,this._bufferSize=r,this._encoderId=Flac.init_libflac_encoder(this._sampleRate,1,this._bitDepth,a,0,!0,0),0===this._encoderId)throw new Error(\"Failed to create libflac encoder.\");if(0!==Flac.init_encoder_stream(this._encoderId,this._onEncodedData.bind(this),this._onMetadataAvailable.bind(this)))throw new Error(\"Failed to initalise libflac encoder.\");this._state=s.WORKING}return r(t,[{key:\"encode\",value:function(t){if(this._state!==s.WORKING)throw new Error(\"Encoder is not ready or has finished.\");if(!Flac.isReady())throw new Error(\"Flac not ready\");for(var e=t.length,n=new Int32Array(e),r=new DataView(n.buffer),a=0,l=0;l<e;l++)r.setInt32(a,32767*t[l],!0),a+=4;if(1!==Flac.FLAC__stream_encoder_process_interleaved(this._encoderId,n,n.length)){var c=Flac.FLAC__stream_encoder_get_state(this._encoderId);o.error(\"Error during encoding\",i[c])}}},{key:\"finish\",value:function(){if(this._state===s.WORKING){this._state=s.FINISHED;var t=Flac.FLAC__stream_encoder_finish(this._encoderId);o.log(\"Flac encoding finished: \",t),Flac.FLAC__stream_encoder_delete(this._encoderId),this._data=this._exportFlacBlob()}}},{key:\"getBlob\",value:function(){return this._state===s.FINISHED?this._data:null}},{key:\"_exportFlacBlob\",value:function(){var t=function(t,e){for(var n=new Uint8Array(e),r=0,o=t.length,i=0;i<o;i++){var s=t[i];n.set(s,r),r+=s.length}return n}(this._flacBuffers,this._flacLength);return new Blob([t],{type:\"audio/flac\"})}},{key:\"_onEncodedData\",value:function(t,e){this._flacBuffers.push(t),this._flacLength+=t.byteLength}}]),t}(),c=null;self.onmessage=function(t){switch(t.data.command){case e.c:var n=t.data.config.bps,r=t.data.config.sampleRate;Flac.isReady()?(c=new l(r,n),self.postMessage({command:e.f})):Flac.onready=function(){setTimeout(function(){c=new l(r,n),self.postMessage({command:e.f})},0)};break;case e.d:null===c?o.error(\"flacEncoderWorker received data when the encoder isnot ready.\"):c.encode(t.data.buf);break;case e.b:if(null!==c){c.finish();var i=c.getBlob();self.postMessage({command:e.e,buf:i}),c=null}}}}.call(e,\"react/features/local-recording/recording/flac/flacEncodeWorker.js\")},83:function(t,e,n){var r=n(62);function o(t,e){this.logStorage=t,this.stringifyObjects=!(!e||!e.stringifyObjects)&&e.stringifyObjects,this.storeInterval=e&&e.storeInterval?e.storeInterval:3e4,this.maxEntryLength=e&&e.maxEntryLength?e.maxEntryLength:1e4,Object.keys(r.levels).forEach(function(t){this[r.levels[t]]=function(t){this._log.apply(this,arguments)}.bind(this,t)}.bind(this)),this.storeLogsIntervalID=null,this.queue=[],this.totalLen=0,this.outputCache=[]}o.prototype.stringify=function(t){try{return JSON.stringify(t)}catch(t){return\"[object with circular refs?]\"}},o.prototype.formatLogMessage=function(t){for(var e=\"\",n=1,o=arguments.length;n<o;n++){var i=arguments[n];!this.stringifyObjects&&t!==r.levels.ERROR||\"object\"!=typeof i||(i=this.stringify(i)),e+=i,n!=o-1&&(e+=\" \")}return e.length?e:null},o.prototype._log=function(){var t=this.formatLogMessage.apply(this,arguments);if(t){var e=this.queue.length?this.queue[this.queue.length-1]:void 0;(\"object\"==typeof e?e.text:e)==t?\"object\"==typeof e?e.count+=1:this.queue[this.queue.length-1]={text:t,count:2}:(this.queue.push(t),this.totalLen+=t.length)}this.totalLen>=this.maxEntryLength&&this._flush(!0,!0)},o.prototype.start=function(){this._reschedulePublishInterval()},o.prototype._reschedulePublishInterval=function(){this.storeLogsIntervalID&&(window.clearTimeout(this.storeLogsIntervalID),this.storeLogsIntervalID=null),this.storeLogsIntervalID=window.setTimeout(this._flush.bind(this,!1,!0),this.storeInterval)},o.prototype.flush=function(){this._flush(!1,!0)},o.prototype._flush=function(t,e){this.totalLen>0&&(this.logStorage.isReady()||t)&&(this.logStorage.isReady()?(this.outputCache.length&&(this.outputCache.forEach(function(t){this.logStorage.storeLogs(t)}.bind(this)),this.outputCache=[]),this.logStorage.storeLogs(this.queue)):this.outputCache.push(this.queue),this.queue=[],this.totalLen=0),e&&this._reschedulePublishInterval()},o.prototype.stop=function(){this._flush(!1,!1)},t.exports=o}});\n\n\n// WEBPACK FOOTER //\n// flacEncodeWorker.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 725);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ec751d16923df98c4df1","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/index.js\n// module id = 13\n// module chunks = 0 1 2 3 4 5","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/local-recording/recording/flac/messageTypes.js","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/Logger.js\n// module id = 62\n// module chunks = 0 1 2 3 4 5","import {\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * WebWorker that does FLAC encoding using libflac.js\n */\n\nself.FLAC_SCRIPT_LOCATION = '/libs/';\n/* eslint-disable */\nimportScripts('/libs/libflac4-1.3.2.min.js');\n/* eslint-enable */\n\n// There is a number of API calls to libflac.js, which does not conform\n// to the camalCase naming convention, but we cannot change it.\n// So we disable the ESLint rule `new-cap` in this file.\n/* eslint-disable new-cap */\n\n// Flow will complain about the number keys in `FLAC_ERRORS`,\n// ESLint will complain about the `declare` statement.\n// As the current workaround, add an exception for eslint.\n/* eslint-disable flowtype/no-types-missing-file-annotation */\ndeclare var Flac: Object;\n\nconst FLAC_ERRORS = {\n    // The encoder is in the normal OK state and samples can be processed.\n    0: 'FLAC__STREAM_ENCODER_OK',\n\n    // The encoder is in the uninitialized state one of the\n    // FLAC__stream_encoder_init_*() functions must be called before samples can\n    // be processed.\n    1: 'FLAC__STREAM_ENCODER_UNINITIALIZED',\n\n    // An error occurred in the underlying Ogg layer.\n    2: 'FLAC__STREAM_ENCODER_OGG_ERROR',\n\n    // An error occurred in the underlying verify stream decoder; check\n    // FLAC__stream_encoder_get_verify_decoder_state().\n    3: 'FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR',\n\n    // The verify decoder detected a mismatch between the original audio signal\n    // and the decoded audio signal.\n    4: 'FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA',\n\n    // One of the callbacks returned a fatal error.\n    5: 'FLAC__STREAM_ENCODER_CLIENT_ERROR',\n\n    // An I/O error occurred while opening/reading/writing a file. Check errno.\n    6: 'FLAC__STREAM_ENCODER_IO_ERROR',\n\n    // An error occurred while writing the stream; usually, the write_callback\n    // returned an error.\n    7: 'FLAC__STREAM_ENCODER_FRAMING_ERROR',\n\n    // Memory allocation failed.\n    8: 'FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR'\n};\n\n/**\n * States of the {@code Encoder}.\n */\nconst EncoderState = Object.freeze({\n    /**\n     * Initial state, when libflac.js is not initialized.\n     */\n    UNINTIALIZED: Symbol('uninitialized'),\n\n    /**\n     * Actively encoding new audio bits.\n     */\n    WORKING: Symbol('working'),\n\n    /**\n     * Encoding has finished and encoded bits are available.\n     */\n    FINISHED: Symbol('finished')\n});\n\n/**\n * Default FLAC compression level.\n */\nconst FLAC_COMPRESSION_LEVEL = 5;\n\n/**\n * Concat multiple Uint8Arrays into one.\n *\n * @param {Uint8Array[]} arrays - Array of Uint8 arrays.\n * @param {number} totalLength - Total length of all Uint8Arrays.\n * @returns {Uint8Array}\n */\nfunction mergeUint8Arrays(arrays, totalLength) {\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    const len = arrays.length;\n\n    for (let i = 0; i < len; i++) {\n        const buffer = arrays[i];\n\n        result.set(buffer, offset);\n        offset += buffer.length;\n    }\n\n    return result;\n}\n\n/**\n * Wrapper class around libflac API.\n */\nclass Encoder {\n\n    /**\n     * Flac encoder instance ID. (As per libflac.js API).\n     * @private\n     */\n    _encoderId = 0;\n\n    /**\n     * Sample rate.\n     * @private\n     */\n    _sampleRate;\n\n    /**\n     * Bit depth (bits per sample).\n     * @private\n     */\n    _bitDepth;\n\n    /**\n     * Buffer size.\n     * @private\n     */\n    _bufferSize;\n\n    /**\n     * Buffers to store encoded bits temporarily.\n     */\n    _flacBuffers = [];\n\n    /**\n     * Length of encoded FLAC bits.\n     */\n    _flacLength = 0;\n\n    /**\n     * The current state of the {@code Encoder}.\n     */\n    _state = EncoderState.UNINTIALIZED;\n\n    /**\n     * The ready-for-grab downloadable Blob.\n     */\n    _data = null;\n\n\n    /**\n     * Constructor.\n     * Note: only create instance when Flac.isReady() returns true.\n     *\n     * @param {number} sampleRate - Sample rate of the raw audio data.\n     * @param {number} bitDepth - Bit depth (bit per sample).\n     * @param {number} bufferSize - The size of each batch.\n     */\n    constructor(sampleRate, bitDepth = 16, bufferSize = 4096) {\n        if (!Flac.isReady()) {\n            throw new Error('libflac is not ready yet!');\n        }\n\n        this._sampleRate = sampleRate;\n        this._bitDepth = bitDepth;\n        this._bufferSize = bufferSize;\n\n        // create the encoder\n        this._encoderId = Flac.init_libflac_encoder(\n            this._sampleRate,\n\n            // Mono channel\n            1,\n            this._bitDepth,\n\n            FLAC_COMPRESSION_LEVEL,\n\n            // Pass 0 in becuase of unknown total samples,\n            0,\n\n            // checksum, FIXME: double-check whether this is necessary\n            true,\n\n            // Auto-determine block size (samples per frame)\n            0\n        );\n\n        if (this._encoderId === 0) {\n            throw new Error('Failed to create libflac encoder.');\n        }\n\n        // initialize the encoder\n        const initResult = Flac.init_encoder_stream(\n            this._encoderId,\n            this._onEncodedData.bind(this),\n            this._onMetadataAvailable.bind(this)\n        );\n\n        if (initResult !== 0) {\n            throw new Error('Failed to initalise libflac encoder.');\n        }\n\n        this._state = EncoderState.WORKING;\n    }\n\n    /**\n     * Receive and encode new data.\n     *\n     * @param {Float32Array} audioData - Raw audio data.\n     * @returns {void}\n     */\n    encode(audioData) {\n        if (this._state !== EncoderState.WORKING) {\n            throw new Error('Encoder is not ready or has finished.');\n        }\n\n        if (!Flac.isReady()) {\n            throw new Error('Flac not ready');\n        }\n        const bufferLength = audioData.length;\n\n        // Convert sample to signed 32-bit integers.\n        // According to libflac documentation:\n        // each sample in the buffers should be a signed integer,\n        // right-justified to the resolution set by\n        // FLAC__stream_encoder_set_bits_per_sample().\n\n        // Here we are using 16 bits per sample, the samples should all be in\n        // the range [-32768,32767]. This is achieved by multipling Float32\n        // numbers with 0x7FFF.\n\n        const bufferI32 = new Int32Array(bufferLength);\n        const view = new DataView(bufferI32.buffer);\n        const volume = 1;\n        let index = 0;\n\n        for (let i = 0; i < bufferLength; i++) {\n            view.setInt32(index, audioData[i] * (0x7FFF * volume), true);\n            index += 4; // 4 bytes (32-bit)\n        }\n\n        // pass it to libflac\n        const status = Flac.FLAC__stream_encoder_process_interleaved(\n            this._encoderId,\n            bufferI32,\n            bufferI32.length\n        );\n\n        if (status !== 1) {\n            // gets error number\n\n            const errorNo\n                = Flac.FLAC__stream_encoder_get_state(this._encoderId);\n\n            logger.error('Error during encoding', FLAC_ERRORS[errorNo]);\n        }\n    }\n\n    /**\n     * Signals the termination of encoding.\n     *\n     * @returns {void}\n     */\n    finish() {\n        if (this._state === EncoderState.WORKING) {\n            this._state = EncoderState.FINISHED;\n\n            const status = Flac.FLAC__stream_encoder_finish(this._encoderId);\n\n            logger.log('Flac encoding finished: ', status);\n\n            // free up resources\n            Flac.FLAC__stream_encoder_delete(this._encoderId);\n\n            this._data = this._exportFlacBlob();\n        }\n    }\n\n    /**\n     * Gets the encoded flac file.\n     *\n     * @returns {Blob} - The encoded flac file.\n     */\n    getBlob() {\n        if (this._state === EncoderState.FINISHED) {\n            return this._data;\n        }\n\n        return null;\n    }\n\n    /**\n     * Converts flac buffer to a Blob.\n     *\n     * @private\n     * @returns {void}\n     */\n    _exportFlacBlob() {\n        const samples = mergeUint8Arrays(this._flacBuffers, this._flacLength);\n\n        const blob = new Blob([ samples ], { type: 'audio/flac' });\n\n        return blob;\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Callback function for saving encoded Flac data.\n     * This is invoked by libflac.\n     *\n     * @private\n     * @param {Uint8Array} buffer - The encoded Flac data.\n     * @param {number} bytes - Number of bytes in the data.\n     * @returns {void}\n     */\n    _onEncodedData(buffer, bytes) {\n        this._flacBuffers.push(buffer);\n        this._flacLength += buffer.byteLength;\n    }\n    /* eslint-enable no-unused-vars */\n\n    /**\n     * Callback function for receiving metadata.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onMetadataAvailable = () => {\n        // reserved for future use\n    }\n}\n\n\nlet encoder = null;\n\nself.onmessage = function(e) {\n\n    switch (e.data.command) {\n    case MAIN_THREAD_INIT:\n    {\n        const bps = e.data.config.bps;\n        const sampleRate = e.data.config.sampleRate;\n\n        if (Flac.isReady()) {\n            encoder = new Encoder(sampleRate, bps);\n            self.postMessage({\n                command: WORKER_LIBFLAC_READY\n            });\n        } else {\n            Flac.onready = function() {\n                setTimeout(() => {\n                    encoder = new Encoder(sampleRate, bps);\n                    self.postMessage({\n                        command: WORKER_LIBFLAC_READY\n                    });\n                }, 0);\n            };\n        }\n        break;\n    }\n\n    case MAIN_THREAD_NEW_DATA_ARRIVED:\n        if (encoder === null) {\n            logger.error('flacEncoderWorker received data when the encoder is'\n                + 'not ready.');\n        } else {\n            encoder.encode(e.data.buf);\n        }\n        break;\n\n    case MAIN_THREAD_FINISH:\n        if (encoder !== null) {\n            encoder.finish();\n            const data = encoder.getBlob();\n\n            self.postMessage(\n                {\n                    command: WORKER_BLOB_READY,\n                    buf: data\n                }\n            );\n            encoder = null;\n        }\n        break;\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/local-recording/recording/flac/flacEncodeWorker.js","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/LogCollector.js\n// module id = 83\n// module chunks = 0 1 2 3 4 5"],"sourceRoot":""}